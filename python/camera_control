#!/usr/bin/python
from gpiozero.exc import *
from gpiozero import Button
import os
import time
import sys

##
# EDIT IF NEEDED
##
channels=[
          "SHEET@1NR","SHEET@1FR",
          "SHEET@2NR","SHEET@2FR",
          "SHEET@3NR","SHEET@3FR",
          "SHEET@4NR","SHEET@4FR",
          "SHEET@5NR","SHEET@5FR",
          "SHEET@6NR","SHEET@6FR",
          "SHEET@W1_3FR", "SHEET@W1_3NR", 
          "SHEET@W4_6FR", "SHEET@W4_6NR"
         ]

fifo_path="/tmp/cameractl.fifo"

# GPIO Button pins
# Ref: https://gpiozero.readthedocs.io/en/stable/recipes.html#pin-numbering
# up: GPIO17  down: GPIO27
try:
  print("GPIO17 -> UP")
  ubtn=Button(17)
  print("GPIO27 -> DOWN")
  dbtn=Button(27)
  sys.stdout.flush()
except BadPinFactory:
  print("WARNING: Cannot find GPIO pins, disabling GPIO button support")
  sys.stdout.flush()
  ubtn=None
  dbtn=None

##################################
##
#  DO NOT EDIT BEYOND THIS POINT
##
##################################
num_channels=len(channels)
current_channel=0

def flush_fifo(f):
  print("flushing fifo")
  sys.stdout.flush()
  d=f.read()
  while len(d) > 0 :
    d=f.read()
  print("done flushing fifo")
  sys.stdout.flush()

def btn_pressed(btn):
  if btn:
    print("Caught Button Press") 
    sys.stdout.flush()
    return btn.is_pressed
  else: return False

def activate_channel(cnum):
  print("Activating {}".format(channels[cnum]))
  sys.stdout.flush()
  retval=os.system("sudo -n systemctl start {}".format(channels[cnum]))
  return retval
def channel_up():
  next_channel=(current_channel+1) % num_channels
  retval=activate_channel(next_channel)
  if retval == 0: 
    print("chan Up: {}:{} -> {}:{}".format(current_channel,channels[current_channel],next_channel,channels[next_channel]))
    sys.stdout.flush()
    return next_channel
  else:
    print("ERROR: chan Up: {}:{} -> {}:{}".format(current_channel,channels[current_channel],next_channel,channels[next_channel]))
    sys.stdout.flush()
    return current_channel

def channel_down():
  next_channel=(current_channel-1) % num_channels
  retval=activate_channel(next_channel)
  if retval == 0: 
    print("chan Down: {}:{} -> {}:{}".format(current_channel,channels[current_channel],next_channel,channels[next_channel]))
    sys.stdout.flush()
    return next_channel
  else:
    print("ERROR: chan Down: {}:{} -> {}:{}".format(current_channel,channels[current_channel],next_channel,channels[next_channel]))
    sys.stdout.flush()
    return current_channel
  return next_channel

if os.path.exists(fifo_path): os.remove(fifo_path) 

os.mkfifo(fifo_path)
fd=os.open(fifo_path,os.O_RDONLY | os.O_NONBLOCK)
fifo=os.fdopen(fd)
##
# TODO: Select startup channel from argument 
##
retval=activate_channel(current_channel)

print("Entering wait loop")
sys.stdout.flush()
while True:
  data = fifo.readline()
  if data  == "": 
    time.sleep(0.1)
    continue

  if data[0].upper()=='U': 
    print("fifo UP command recv'd")
    sys.stdout.flush()
    current_channel=channel_up()
    flush_fifo(fifo)
    time.sleep(1) 
    continue

  if btn_pressed(ubtn):
    print("Up GPIO Button pressed")
    sys.stdout.flush()
    current_channel=channel_up()
    flush_fifo(fifo)
    time.sleep(1) 
    continue

  if data[0].upper()=='D':
    print("fifo DOWN command recv'd")
    sys.stdout.flush()
    current_channel=channel_down() 
    flush_fifo(fifo)
    time.sleep(1)
    continue

  if btn_pressed(dbtn): 
    print("Down GPIO Button pressed")
    sys.stdout.flush()
    current_channel=channel_down() 
    flush_fifo(fifo)
    time.sleep(1)
    continue

print("done")
sys.stdout.flush()
fifo.close()
